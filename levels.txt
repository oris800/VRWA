🔓 שלב 1: גניבת חשבון של משתמש רגיל (דרך איפוס סיסמה)
🎯 מטרה:

להיכנס לחשבון של משתמש כלשהו.
⚙️ איך זה עובד:

    המערכת מאפשרת איפוס סיסמה לפי שם משתמש ושאלה אבטחה.

    לא נבדק האם המשתמש המחפש את האיפוס באמת קיים או שהבקשה מגיעה מהמשתמש עצמו.

🧨 החולשה:

    אין הגבלה על ניסיונות – מה שמאפשר כוח גס (Brute Force).

    אין אימות שהמבקש הוא בעל החשבון.

🧠 איך תוקף ינצל את זה:

    הולך לעמוד איפוס סיסמה ומכניס שמות משתמשים באקראי (למשל: customer1, customer2 וכו').

    כשהמערכת מחזירה שאלה אבטחה (למשל: "מה המשחק האהוב עליך משנת 2011?"), הוא מבין שהשם קיים.

    מנסה תשובות שונות לשאלה האבטחה עד שפוגע (למשל: Portal 2).

    לאחר הצלחה, יכול להכניס סיסמה חדשה ולהשתלט על החשבון.

🎁 דגל:

השם של המשתמש שפרצת אליו.
🔓 שלב 2: השתלטות על חשבון של customer35 בעזרת פגיעות גישת הרשאות (Access Control)
🎯 מטרה:

להיכנס לחשבון של customer35.
⚙️ איך זה עובד:

    לעמוד האישי של המשתמש יש טופס שמאפשר שינוי סיסמה.

    הפורם הזה מקבל את שם המשתמש בצורה מוצפנת (ב-Caesar Cipher פשוט).

    אין בדיקה שמי שמנסה לשנות סיסמה באמת הבעלים של החשבון.

🧨 החולשה:

    שבירת בקרת גישה (Broken Access Control): משתמש רגיל יכול לשנות סיסמה לכל משתמש אחר אם יודע את שם המשתמש שלו המוצפן.

    Caesar Cipher פשוט ולא מאובטח (אפשר לפענח בקלות).

🧠 איך תוקף ינצל את זה:

    מפענח את customer35 לייצוג שלו לפי הפונקציה caesar_cipher.

    שולח בקשת POST עם שם המשתמש המוצפן, וסיסמה חדשה.

    כעת הוא יכול להתחבר לחשבון של customer35.

🎁 דגל:

ה-ID של המשתמש customer35 (מתקבל מהמערכת אחרי התחברות).
💸 שלב 3: קניית מוצר יקר מדי – פגיעות לוגיקה עסקית
🎯 מטרה:

לקנות מוצר יקר (למשל: Amiga 500) שמחירו גבוה מהכסף שיש לכל המשתמשים.
⚙️ איך זה עובד:

    ברכישת מוצר, המערכת מוסיפה אותו לעגלת הקניות ואז בודקת האם יש מספיק כסף.

    אבל... לא מתקיימת בדיקה בפועל בשום שלב שמונעת את הרכישה גם אם אין מספיק כסף, או הבדיקה נעשית מאוחר מדי.

🧨 החולשה:

    פגיעות לוגיקה עסקית (Business Logic Flaw) – אין עצירה של הרכישה אם אין מספיק כסף.

    ייתכן והוספת המוצר לעגלה "נחשבת" לרכישה בפועל.

🧠 איך תוקף ינצל את זה:

    מוסיף את המוצר היקר לעגלה.

    משגר בקשת POST שמפעילה את תהליך הרכישה גם בלי כסף.

    הדגל הוא מזהה הרכישה, שמתקבל כשנכנסים לעמוד עגלת הקניות.

🎁 דגל:

מספר ההזמנה או מזהה המוצר בעגלה.
🔍 שלב 4: מציאת כתובת הפנאל האדמיני בעזרת SSRF
🎯 מטרה:

למצוא דרך לגשת לדף admin_panel שנחסם בגישה רגילה.
⚙️ איך זה עובד:

    בדף /dogs, המשתמש שולח כתובת URL של API (למשל: של כלבים) – שהשרת שולח אליה בקשה.

    הקוד לא בודק אם ה-URL הוא חיצוני או פנימי.

🧨 החולשה:

    SSRF (Server-Side Request Forgery) – המשתמש יכול לגרום לשרת לשלוח בקשה לכתובת פנימית שלא נגישות מבחוץ.

🧠 איך תוקף ינצל את זה:

    בטופס של /dogs, במקום להכניס API רגיל, יכניס כתובת פנימית: http://127.0.0.1:5000/pA

    השרת ישלח את הבקשה ויחשוף את תוכן הפאנל, כולל אולי פרטים רגישים.

🎁 דגל:

תוכן הדף של admin_panel.
🛠️ שלב 5: הוצאת פרטי התחברות של האדמין בעזרת SQL Injection
🎯 מטרה:

להשיג שם משתמש וסיסמה של האדמין ממסד הנתונים.
⚙️ איך זה עובד:

    קיים מקום אחד לפחות שבו הקלט מהמשתמש עובר ישירות לשאילתה SQL ללא סינון.

🧨 החולשה:

    SQL Injection – תוקף יכול לשנות את השאילתה לפי צרכיו ולשלוף מידע רגיש.

🧠 איך תוקף ינצל את זה:

    יכניס קלט כמו ' OR '1'='1 או admin' -- במקום שם המשתמש בשאילתה.

    יגרום לשאילתה לשלוף את כל הנתונים, כולל שם וסיסמה של האדמין.

🎁 דגל:

שם המשתמש והסיסמה של האדמין.